# (Average.Total.Payments) in New York?
# Import packages
library(ggplot2)
library(ggpmisc)
# Import files
payments <- read.csv('payments.csv')
# Create scatterplot showing the relationship
ggplot(payments, aes(x = Average.Covered.Charges, y = Average.Total.Payments)) +
geom_point(alpha = 0.1) + # add transparency to help with overplotting
scale_x_log10() + # plot on log scale so data doesn't look so scrunched
scale_y_log10() +
stat_smooth(method = 'lm') +
stat_poly_eq(aes(label = ..eq.label..), formula = y~x, parse = TRUE) +
labs(x = 'Mean Covered Charges (Log($))', y = 'Mean Total Payments (Log($))',
title = 'Positive correlation between logs of covered charges and total payments') +
theme(plot.title = element_text(size = 12))
ggsave('plot1.pdf', width = 5, height = 5)
# Make a plot that answers the question: what is the relationship between mean
# covered charges (Average.Covered.Charges) and mean total payments
# (Average.Total.Payments) in New York?
# Import packages
library(ggplot2)
library(ggpmisc)
# Import files
payments <- read.csv('payments.csv')
# Create scatterplot showing the relationship
ggplot(payments, aes(x = Average.Covered.Charges, y = Average.Total.Payments)) +
geom_point(alpha = 0.1) + # add transparency to help with overplotting
scale_x_log10() + # plot on log scale so data doesn't look so scrunched
scale_y_log10() +
stat_smooth(method = 'lm') +
stat_poly_eq(aes(label = ..eq.label..), formula = y~x, parse = TRUE) +
labs(x = 'Mean Covered Charges (Log($))', y = 'Mean Total Payments (Log($))',
title = 'Positive correlation between logs of covered charges and total payments') +
theme(plot.title = element_text(size = 12))
ggsave('plot1.pdf', width = 5, height = 5)
# Create scatterplot showing the relationship
ggplot(payments, aes(x = Average.Covered.Charges, y = Average.Total.Payments)) +
geom_point(alpha = 0.1) + # add transparency to help with overplotting
scale_x_log10() + # plot on log scale so data doesn't look so scrunched
scale_y_log10() +
stat_smooth(method = 'lm') +
stat_poly_eq(aes(label = ..eq.label..), formula = y~x, parse = TRUE) +
labs(x = 'Mean Covered Charges (Log($))', y = 'Mean Total Payments (Log($))',
title = 'Positive correlation between logs of covered charges
and total payments') +
theme(plot.title = element_text(size = 12))
ggsave('plot1.pdf', width = 5, height = 5)
ggplot(payments, aes(x = Average.Covered.Charges, y = Average.Total.Payments)) +
geom_point(alpha = 0.1) + # add transparency to help with overplotting
# scale_x_log10() + # plot on log scale so data doesn't look so scrunched
# scale_y_log10() +
stat_smooth(method = 'lm') +
stat_poly_eq(aes(label = ..eq.label..), formula = y~x, parse = TRUE) +
labs(x = 'Mean Covered Charges (Log($))', y = 'Mean Total Payments (Log($))',
title = 'Positive correlation between logs of covered charges
and total payments') +
theme(plot.title = element_text(size = 12))
# ggsave('plot1.pdf', width = 5, height = 5)
# Create scatterplot showing the relationship
ggplot(payments, aes(x = Average.Covered.Charges, y = Average.Total.Payments)) +
geom_point(alpha = 0.1) + # add transparency to help with overplotting
scale_x_log10() + # plot on log scale so data doesn't look so scrunched
scale_y_log10() +
stat_smooth(method = 'lm') +
stat_poly_eq(aes(label = ..eq.label..), formula = y~x, parse = TRUE) +
labs(x = 'Mean Covered Charges (Log($))', y = 'Mean Total Payments (Log($))',
title = 'Positive correlation between logs of
covered charges and total payments') +
theme(plot.title = element_text(size = 18))
ggsave('plot1.pdf', width = 5, height = 5)
# Create scatterplot showing the relationship
ggplot(payments, aes(x = Average.Covered.Charges, y = Average.Total.Payments)) +
geom_point(alpha = 0.1) + # add transparency to help with overplotting
scale_x_log10() + # plot on log scale so data doesn't look so scrunched
scale_y_log10() +
stat_smooth(method = 'lm') +
stat_poly_eq(aes(label = ..eq.label..), formula = y~x, parse = TRUE) +
labs(x = 'Mean Covered Charges (Log($))', y = 'Mean Total Payments (Log($))',
title = 'Positive correlation between logs of
covered charges and total payments') +
theme(plot.title = element_text(size = 16))
ggsave('plot1.pdf', width = 5, height = 5)
View(payments)
ggplot(payments, aes(x = Average.Covered.Charges, y = Average.Total.Payments)) +
geom_point(alpha = 0.1) + # add transparency to help with overplotting
scale_x_log10() + # plot on log scale so data doesn't look so scrunched
scale_y_log10() +
stat_smooth(method = 'lm') + # plot linear regression
# show lin reg formula on plot
stat_poly_eq(aes(label =..eq.label..), formula = y~x, parse = TRUE) +
facet_grid(DRG.Definition ~ Provider.State)
ggplot(payments, aes(x = Average.Covered.Charges, y = Average.Total.Payments)) +
geom_point(alpha = 0.1) + # add transparency to help with overplotting
scale_x_log10() + # plot on log scale so data doesn't look so scrunched
scale_y_log10() +
stat_smooth(method = 'lm') + # plot linear regression
# show lin reg formula on plot
# stat_poly_eq(aes(label =..eq.label..), formula = y~x, parse = TRUE) +
facet_grid(. ~ Provider.State)
# # label plot
# labs(x = 'Mean Covered Charges (Log($))', y = 'Mean Total Payments (Log($))',
#      title = 'Positive correlation between logs of
#      covered charges and total payments') +
# theme(plot.title = element_text(size = 16))
ggplot(payments, aes(x = Average.Covered.Charges, y = Average.Total.Payments)) +
geom_point(alpha = 0.1) + # add transparency to help with overplotting
scale_x_log10() + # plot on log scale so data doesn't look so scrunched
scale_y_log10() +
stat_smooth(method = 'lm') + # plot linear regression
# show lin reg formula on plot
# stat_poly_eq(aes(label =..eq.label..), formula = y~x, parse = TRUE) +
facet_grid(. ~ Provider.State) +
geom_point(alpha = 0.1) + # add transparency to help with overplotting
scale_x_log10() + # plot on log scale so data doesn't look so scrunched
scale_y_log10() +
stat_smooth(method = 'lm') + # plot linear regression
# show lin reg formula on plot
# stat_poly_eq(aes(label =..eq.label..), formula = y~x, parse = TRUE) +
facet_grid(. ~ DRG.Definition) +
xlab('hello')
ggplot(payments, aes(x = Average.Covered.Charges, y = Average.Total.Payments)) +
geom_point(alpha = 0.1) + # add transparency to help with overplotting
scale_x_log10() + # plot on log scale so data doesn't look so scrunched
scale_y_log10() +
stat_smooth(method = 'lm') + # plot linear regression
# show lin reg formula on plot
# stat_poly_eq(aes(label =..eq.label..), formula = y~x, parse = TRUE) +
facet_grid(. ~ Provider.State) +
facet_grid(. ~ DRG.Definition)
# Create scatterplot showing the relationship
ggplot(payments, aes(x = Average.Covered.Charges, y = Average.Total.Payments)) +
geom_point(alpha = 0.1) + # add transparency to help with overplotting
scale_x_log10() + # plot on log scale so data doesn't look so scrunched
scale_y_log10() +
stat_smooth(method = 'lm') + # plot linear regression
# show lin reg formula on plot
# stat_poly_eq(aes(label =..eq.label..), formula = y~x, parse = TRUE) +
facet_grid(DRG.Definition ~ Provider.State)
# label plot
labs(x = 'Mean Covered Charges (Log($))', y = 'Mean Total Payments (Log($))',
title = 'Positive correlation between logs of
covered charges and total payments') +
theme(plot.title = element_text(size = 16))
ggplot(payments, aes(x = Average.Covered.Charges, y = Average.Total.Payments)) +
geom_point(alpha = 0.1, size = 1) + # add transparency to help with overplotting
scale_x_log10() + # plot on log scale so data doesn't look so scrunched
scale_y_log10() +
stat_smooth(method = 'lm') + # plot linear regression
# show lin reg formula on plot
# stat_poly_eq(aes(label =..eq.label..), formula = y~x, parse = TRUE) +
facet_grid(DRG.Definition ~ Provider.State)
# label plot
labs(x = 'Mean Covered Charges (Log($))', y = 'Mean Total Payments (Log($))',
title = 'Positive correlation between logs of
covered charges and total payments') +
theme(plot.title = element_text(size = 16))
# Create scatterplot showing the relationship
ggplot(payments, aes(x = Average.Covered.Charges, y = Average.Total.Payments)) +
geom_point(alpha = 0.1, size = 0.5) + # add transparency to help with overplotting
scale_x_log10() + # plot on log scale so data doesn't look so scrunched
scale_y_log10() +
stat_smooth(method = 'lm') + # plot linear regression
# show lin reg formula on plot
# stat_poly_eq(aes(label =..eq.label..), formula = y~x, parse = TRUE) +
facet_grid(DRG.Definition ~ Provider.State)
# label plot
labs(x = 'Mean Covered Charges (Log($))', y = 'Mean Total Payments (Log($))',
title = 'Positive correlation between logs of
covered charges and total payments') +
theme(plot.title = element_text(size = 16))
# Save as PDF
ggsave('plot2.pdf', width = 10, height = 10)
ggplot(payments, aes(x = Average.Covered.Charges, y = Average.Total.Payments)) +
geom_point(alpha = 0.1, size = 0.5) + # add transparency to help with overplotting
scale_x_log10() + # plot on log scale so data doesn't look so scrunched
scale_y_log10() +
stat_smooth(method = 'lm') + # plot linear regression
# show lin reg formula on plot
# stat_poly_eq(aes(label =..eq.label..), formula = y~x, parse = TRUE) +
facet_grid(DRG.Definition ~ Provider.State) +
# label plot
labs(x = 'Mean Covered Charges (Log($))', y = 'Mean Total Payments (Log($))',
title = 'Positive correlation between logs of
covered charges and total payments') +
theme(plot.title = element_text(size = 16))
# Save as PDF
ggsave('plot2.pdf', width = 10, height = 10)
# Create scatterplot showing the relationship
ggplot(payments, aes(x = Average.Covered.Charges, y = Average.Total.Payments)) +
geom_point(alpha = 0.1, size = 0.5) + # add transparency to help with overplotting
scale_x_log10() + # plot on log scale so data doesn't look so scrunched
scale_y_log10() +
stat_smooth(method = 'lm') + # plot linear regression
# show lin reg formula on plot
# stat_poly_eq(aes(label =..eq.label..), formula = y~x, parse = TRUE) +
facet_grid(DRG.Definition ~ Provider.State) +
# label plot
labs(x = 'Mean Covered Charges (Log($))', y = 'Mean Total Payments (Log($))',
title = 'Positive correlation between logs of covered charges and total payments') +
theme(plot.title = element_text(size = 16),
strip.text.y = element_text(size = 8))
# Create scatterplot showing the relationship
ggplot(payments, aes(x = Average.Covered.Charges, y = Average.Total.Payments)) +
geom_point(alpha = 0.1, size = 0.5) + # add transparency to help with overplotting
scale_x_log10() + # plot on log scale so data doesn't look so scrunched
scale_y_log10() +
stat_smooth(method = 'lm') + # plot linear regression
# show lin reg formula on plot
# stat_poly_eq(aes(label =..eq.label..), formula = y~x, parse = TRUE) +
facet_grid(DRG.Definition ~ Provider.State) +
# label plot
labs(x = 'Mean Covered Charges (Log($))', y = 'Mean Total Payments (Log($))',
title = 'Positive correlation between logs of covered charges and total payments') +
theme(plot.title = element_text(size = 16),
strip.text.y = element_text(size = 8))
# Save as PDF
ggsave('plot2.pdf', width = 10, height = 10)
# Create scatterplot showing the relationship
ggplot(payments, aes(x = Average.Covered.Charges, y = Average.Total.Payments)) +
geom_point(alpha = 0.1, size = 0.5) + # add transparency to help with overplotting
scale_x_log10() + # plot on log scale so data doesn't look so scrunched
scale_y_log10() +
stat_smooth(method = 'lm') + # plot linear regression
# show lin reg formula on plot
# stat_poly_eq(aes(label =..eq.label..), formula = y~x, parse = TRUE) +
facet_grid(DRG.Definition ~ Provider.State) +
# label plot
labs(x = 'Mean Covered Charges (Log($))', y = 'Mean Total Payments (Log($))',
title = 'Positive correlation between logs of covered charges and total payments') +
theme(plot.title = element_text(size = 16),
strip.text.y = element_text(size = 4))
# Save as PDF
ggsave('plot2.pdf', width = 10, height = 10)
levels(payments$DRG.Definition)
levels(payments$DRG.Definition) <- c('Pneumonia', 'Heart Failure', 'Gastroent',
'Misc Nutrition', 'Kidney/UI Tract', 'Sepsis')
# Create scatterplot showing the relationship
ggplot(payments, aes(x = Average.Covered.Charges, y = Average.Total.Payments)) +
geom_point(alpha = 0.1, size = 0.5) + # add transparency to help with overplotting
scale_x_log10() + # plot on log scale so data doesn't look so scrunched
scale_y_log10() +
stat_smooth(method = 'lm') + # plot linear regression
# show lin reg formula on plot
# stat_poly_eq(aes(label =..eq.label..), formula = y~x, parse = TRUE) +
facet_grid(DRG.Definition ~ Provider.State) +
# label plot
labs(x = 'Mean Covered Charges (Log($))', y = 'Mean Total Payments (Log($))',
title = 'Positive correlation between logs of covered charges and total payments') +
theme(plot.title = element_text(size = 16),
strip.text.y = element_text(size = 4))
# Save as PDF
ggsave('plot2.pdf', width = 10, height = 10)
covered charges and total payments') +
theme(plot.title = element_text(size = 16))
# Create scatterplot showing the relationship
ggplot(payments, aes(x = Average.Covered.Charges, y = Average.Total.Payments)) +
geom_point(alpha = 0.1, size = 0.5) + # add transparency to help with overplotting
scale_x_log10() + # plot on log scale so data doesn't look so scrunched
scale_y_log10() +
stat_smooth(method = 'lm') + # plot linear regression
# show lin reg formula on plot
# stat_poly_eq(aes(label =..eq.label..), formula = y~x, parse = TRUE) +
facet_grid(DRG.Definition ~ Provider.State) +
# label plot
labs(x = 'Mean Covered Charges (Log($))', y = 'Mean Total Payments (Log($))',
title = 'Positive correlation between logs of covered charges and total payments') +
theme(plot.title = element_text(size = 16),
strip.text.y = element_text(size = 8))
# Save as PDF
ggsave('plot2.pdf', width = 10, height = 10)
# Create scatterplot showing the relationship
ggplot(payments, aes(x = Average.Covered.Charges, y = Average.Total.Payments)) +
geom_point(alpha = 0.1, size = 0.5) + # add transparency to help with overplotting
scale_x_log10() + # plot on log scale so data doesn't look so scrunched
scale_y_log10() +
stat_smooth(method = 'lm') + # plot linear regression
# show lin reg formula on plot
# stat_poly_eq(aes(label =..eq.label..), formula = y~x, parse = TRUE) +
facet_grid(DRG.Definition ~ Provider.State) +
# label plot
labs(x = 'Mean Covered Charges (Log($))', y = 'Mean Total Payments (Log($))',
title = 'Positive correlation between logs of covered charges and total payments') +
theme(plot.title = element_text(size = 16),
strip.text.y = element_text(size = 8))
# Save as PDF
ggsave('plot2.pdf', width = 10, height = 10)
rm(list = ls)
rm(ls = list)
rm(ls = 'list')
rm(list=ls())
setwd("~/R Work/Coursera/knitrProject1")
read.csv('activity.csv')
data <- read.csv('activity.csv')
summary(data)
tail(data)
head(data)
View(data)
tbl_df(data)
library(tidyverse)
tbl_df(data)
data <- tbl_df(read.csv('activity.csv'))
class(data)
glimpse(data)
?summarize
data %>%
group_by(date) %>%
summarize(total = sum(steps, na.rm=T))
data <- data %>%
group_by(date) %>%
summarize(total = sum(steps, na.rm=T))
hist(data$total)
hist(data$total, breaks = 10)
hist(data$total, breaks = 20)
hist(data$total, breaks = 15)
mean(dailyTotals$total)
mean(data$total)
median(data$total)
?plot
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# First get averages across all days for each 5-minute interval
intervals <- data %>%
group_by(interval) %>%
summarize(average = mean(steps, na.rm=T))
data <- read.csv('activity.csv')
summary(data)
tail(data)
data <- tbl_df(data) # Convert to tibble for tidyverse processing
# First get averages across all days for each 5-minute interval
intervals <- data %>%
group_by(interval) %>%
summarize(average = mean(steps, na.rm=T))
# Plot this data as a line graph
plot(x = intervals$interval, y = intervals$steps, type = 'l')
View(intervals)
# First get averages across all days for each 5-minute interval
intervals <- data %>%
group_by(interval) %>%
summarize(average = mean(steps, na.rm=T))
# Plot this data as a line graph
plot(x = intervals$interval, y = intervals$average, type = 'l')
?max
?which.max
which.max(intervals$average)
intervals$interval[104]
835*5
835*5/60
?as.POSIXct
835/60
2355/60
835/2355
835/2355*24
# First get averages across all days for each 5-minute interval
intervals <- data %>%
group_by(interval) %>%
summarize(average = mean(steps, na.rm=T))
# Plot this data as a line graph
plot(x = intervals$interval, y = intervals$average, type = 'l')
# Get interval of maximum number of steps, and approximate what time of day it is by taking the interval as a ratio of the highest interval.
max <- intervals$interval[which.max(intervals$average)]
time <- (max/2355)*24
?replace
class(data)
dataComplete <- data %>%
replace(steps, is.na(steps), 5)
replace(data$steps, is.na(data$steps), 5)
grep(data$interval[3], intervals$interval)
grep(paste("^",data$interval[3],"$"), intervals$interval)
grep(^5$, intervals$interval)
grep('^5$', intervals$interval)
replace(data$steps, is.na(data$steps),
intervals$average[
grep(data$interval, intervals$interval)])
dataComplete <- data %>%
group_by(interval) %>%
mutate(average = mean(steps, na.rm=T))
replace(steps, is.na(steps), average)
dataComplete <- data %>%
group_by(interval) %>%
mutate(average = mean(steps, na.rm=T)) %>%
replace(steps, is.na(steps), average)
dataComplete <- data %>%
group_by(interval) %>%
mutate(average = mean(steps, na.rm=T))
View(dataComplete)
dataComplete <- data %>%
group_by(interval) %>%
mutate(average = mean(steps, na.rm=T))
dataComplete$steps[is.na(dataComplete$steps)] <-
dataComplete$average[is.na(dataComplete$steps)]
View(dataComplete)
class(dataComplete$date)
dataComplete$date[1]
as.character(dataComplete$date[1])
strptime(as.character(dataComplete$date), format = '$Y-%m-%d')
strptime('2012-10-01', format = '$Y-%m-%d')
strptime('2012-10-01', format = '$YYYY-%mm-%dd')
as.Date('2012-10-01')
class(as.Date('2012-10-01'))
weekdays(as.Date('2012-10-01'))
dataComplete$date <- as.Date(as.character(dataComplete$date))
class(dataComplete$date)
view(dataComplete)
View(dataComplete)
dataComplete <- dataComplete %>%
mutate(day = weekdays(dataComplete$Date))
dataComplete <- dataComplete %>%
mutate(day = weekdays(dataComplete$date))
dataComplete <- dataComplete %>%
ungroup %>%
mutate(day = weekdays(dataComplete$date))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(cache = TRUE)
library(tidyverse)
# Add new column in dataset specifying whether weekend or weekday
dataComplete$date <- as.Date(as.character(dataComplete$date))
dataComplete <- dataComplete %>%
ungroup %>%
mutate(day = weekdays(dataComplete$date))
View(dataComplete)
?replace
grep(("Saturday"| "Sunday"), dataComplete$day)
grep("Saturday\|Sunday", dataComplete$day)
grep("Saturday|Sunday", dataComplete$day)
dataComplete$day <- replace(dataComplete$day, grep("Saturday|Sunday", dataComplete$day))
dataComplete$day <- replace(dataComplete$day, grep("Saturday|Sunday", dataComplete$day), "Weekday")
dataComplete <- data %>%
group_by(interval) %>%
mutate(average = mean(steps, na.rm=T))
dataComplete$steps[is.na(dataComplete$steps)] <-
dataComplete$average[is.na(dataComplete$steps)]
dataComplete$day <- replace(dataComplete$day, grep("(?!Weekend)", dataComplete$day, "Weekday"))
dataComplete$day <- replace(dataComplete$day, grep("Saturday|Sunday", dataComplete$day), "Weekend")
dataComplete$day <- replace(dataComplete$day, grep("(?!Weekend)", dataComplete$day), "Weekday")
dataComplete$date <- as.Date(as.character(dataComplete$date))
dataComplete <- dataComplete %>%
ungroup %>%
mutate(day = weekdays(dataComplete$date))
# Turn column containing days of the week to factor weekday/weekend
dataComplete$day <- replace(dataComplete$day, grep("Saturday|Sunday", dataComplete$day), "Weekend")
dataComplete$day <- replace(dataComplete$day, grep("(?!Weekend)", dataComplete$day), "Weekday")
dataComplete$day <- replace(dataComplete$day, grep("Saturday|Sunday", dataComplete$day), "Weekend")
dataComplete$day <- replace(dataComplete$day, grep("^(?!Weekend).*$", dataComplete$day), "Weekday")
dataComplete$day <- replace(dataComplete$day, grep("^((?!Weekend).)*$", dataComplete$day), "Weekday")
dataComplete$day <- replace(dataComplete$day, grep("/^(?!.*Weekend)/", dataComplete$day), "Weekday")
dataComplete$day <- replace(dataComplete$day, grep("Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday", dataComplete$day), "Weekday")
dataComplete$day <- as.factor(dataComplete$day)
class(dataComplete$day)
View(dataComplete)
summary(dataComplete)
dataComplete$day == 1
dataComplete$day == 0
dataComplete$day == Weekday
dataComplete$day == 'Weekday'
dataComplete$day <- as.factor(dataComplete$day)
dataComplete$day == 0
dataComplete$day == 'Weekday'
weekdays <- dataComplete %>%
filter(day = 'Weekday') %>%
group_by(interval) %>%
summarize(average = mean(steps))
weekdays <- dataComplete %>%
filter(day == 'Weekday') %>%
group_by(interval) %>%
summarize(average = mean(steps))
View(weekdays)
View(weekdays)
par(mfrow=c(2,1))
# First get averages for weekday days
weekdays <- dataComplete %>%
filter(day == 'Weekday') %>%
group_by(interval) %>%
summarize(average = mean(steps))
# Plot this data as a line graph
plot(x = weekdays$interval, y = weekdays$average, type = 'l')
# Then do the same for weekend days
weekends <- dataComplete %>%
filter(day == 'Weekend') %>%
group_by(interval) %>%
summarize(average = mean(steps))
plot(x = weekends$interval, y = weekends$average, type = 'l')
plot(x = weekdays$interval, y = weekdays$average, type = 'l', color = "blue", xlab = '', ylab = '')
plot(x = weekdays$interval, y = weekdays$average, type = 'l', color = "blue", xlab = '', ylab = '', xaxt = 'n', yaxt = 'n')
plot(x = weekdays$interval, y = weekdays$average, type = 'l', col = "blue", xlab = '', ylab = '', xaxt = 'n', yaxt = 'n')
plot(x = weekdays$interval, y = weekdays$average, type = 'l', color = "blue", xlab = '', ylab = '', xaxt = 'n', main = 'Weekdays')
mtext('Interval', side = 1, outer = TRUE, line = 2)
mtext('Number of Steps', side = 2, outer = TRUE, line = 2)
plot(x = weekdays$interval, y = weekdays$average, type = 'l', col = "blue", xlab = '', ylab = '', xaxt = 'n', main = 'Weekdays')
# Then do the same for weekend days
weekends <- dataComplete %>%
filter(day == 'Weekend') %>%
group_by(interval) %>%
summarize(average = mean(steps))
plot(x = weekends$interval, y = weekends$average, type = 'l', col = "blue", xlab = '', ylab = '', main = 'Weekends')
mtext('Interval', side = 1, outer = TRUE, line = 2)
mtext('Number of Steps', side = 2, outer = TRUE, line = 2)
plot(x = weekdays$interval, y = weekdays$average, type = 'l', col = "blue", xlab = 'Number of Steps', ylab = '', xaxt = 'n', main = 'Weekdays')
# Then do the same for weekend days
weekends <- dataComplete %>%
filter(day == 'Weekend') %>%
group_by(interval) %>%
summarize(average = mean(steps))
plot(x = weekends$interval, y = weekends$average, type = 'l', col = "blue", xlab = 'Interval', ylab = 'Number of Steps', main = 'Weekends')
plot(x = weekdays$interval, y = weekdays$average, type = 'l', col = "blue", xlab = '', ylab = 'Number of Steps', xaxt = 'n', main = 'Weekdays')
# Then do the same for weekend days
weekends <- dataComplete %>%
filter(day == 'Weekend') %>%
group_by(interval) %>%
summarize(average = mean(steps))
plot(x = weekends$interval, y = weekends$average, type = 'l', col = "blue", xlab = 'Interval', ylab = 'Number of Steps', main = 'Weekends')
?plot
